//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GreenPantryFrontend.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Image_LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.InvoiceLine[] InvoiceLinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.ShoppingList[] ShoppingListsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockOnHandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.SubCategory SubCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubCategoryIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image_Location {
            get {
                return this.Image_LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.Image_LocationField, value) != true)) {
                    this.Image_LocationField = value;
                    this.RaisePropertyChanged("Image_Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.InvoiceLine[] InvoiceLines {
            get {
                return this.InvoiceLinesField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceLinesField, value) != true)) {
                    this.InvoiceLinesField = value;
                    this.RaisePropertyChanged("InvoiceLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.ShoppingList[] ShoppingLists {
            get {
                return this.ShoppingListsField;
            }
            set {
                if ((object.ReferenceEquals(this.ShoppingListsField, value) != true)) {
                    this.ShoppingListsField = value;
                    this.RaisePropertyChanged("ShoppingLists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockOnHand {
            get {
                return this.StockOnHandField;
            }
            set {
                if ((this.StockOnHandField.Equals(value) != true)) {
                    this.StockOnHandField = value;
                    this.RaisePropertyChanged("StockOnHand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.SubCategory SubCategory {
            get {
                return this.SubCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubCategoryField, value) != true)) {
                    this.SubCategoryField = value;
                    this.RaisePropertyChanged("SubCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubCategoryID {
            get {
                return this.SubCategoryIDField;
            }
            set {
                if ((this.SubCategoryIDField.Equals(value) != true)) {
                    this.SubCategoryIDField = value;
                    this.RaisePropertyChanged("SubCategoryID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubCategory", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class SubCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.ProductCategory ProductCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Product[] ProductsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.ProductCategory ProductCategory {
            get {
                return this.ProductCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductCategoryField, value) != true)) {
                    this.ProductCategoryField = value;
                    this.RaisePropertyChanged("ProductCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Product[] Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubID {
            get {
                return this.SubIDField;
            }
            set {
                if ((this.SubIDField.Equals(value) != true)) {
                    this.SubIDField = value;
                    this.RaisePropertyChanged("SubID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvoiceLine", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class InvoiceLine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Invoice InvoiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InvoiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Product ProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QtyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Invoice Invoice {
            get {
                return this.InvoiceField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceField, value) != true)) {
                    this.InvoiceField = value;
                    this.RaisePropertyChanged("Invoice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InvoiceID {
            get {
                return this.InvoiceIDField;
            }
            set {
                if ((this.InvoiceIDField.Equals(value) != true)) {
                    this.InvoiceIDField = value;
                    this.RaisePropertyChanged("InvoiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Product Product {
            get {
                return this.ProductField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductField, value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((this.ProductIDField.Equals(value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Qty {
            get {
                return this.QtyField;
            }
            set {
                if ((this.QtyField.Equals(value) != true)) {
                    this.QtyField = value;
                    this.RaisePropertyChanged("Qty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShoppingList", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ShoppingList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Product ProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Product Product {
            get {
                return this.ProductField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductField, value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((this.ProductIDField.Equals(value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Invoice", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Invoice : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeliveryDatetimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.InvoiceLine[] InvoiceLinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeliveryDatetime {
            get {
                return this.DeliveryDatetimeField;
            }
            set {
                if ((this.DeliveryDatetimeField.Equals(value) != true)) {
                    this.DeliveryDatetimeField = value;
                    this.RaisePropertyChanged("DeliveryDatetime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.InvoiceLine[] InvoiceLines {
            get {
                return this.InvoiceLinesField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceLinesField, value) != true)) {
                    this.InvoiceLinesField = value;
                    this.RaisePropertyChanged("InvoiceLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Address[] AddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Card[] CardsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateRegisteredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Device[] DevicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Invoice[] InvoicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.ShoppingList[] ShoppingListsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Address[] Addresses {
            get {
                return this.AddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressesField, value) != true)) {
                    this.AddressesField = value;
                    this.RaisePropertyChanged("Addresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Card[] Cards {
            get {
                return this.CardsField;
            }
            set {
                if ((object.ReferenceEquals(this.CardsField, value) != true)) {
                    this.CardsField = value;
                    this.RaisePropertyChanged("Cards");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateRegistered {
            get {
                return this.DateRegisteredField;
            }
            set {
                if ((this.DateRegisteredField.Equals(value) != true)) {
                    this.DateRegisteredField = value;
                    this.RaisePropertyChanged("DateRegistered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Device[] Devices {
            get {
                return this.DevicesField;
            }
            set {
                if ((object.ReferenceEquals(this.DevicesField, value) != true)) {
                    this.DevicesField = value;
                    this.RaisePropertyChanged("Devices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Invoice[] Invoices {
            get {
                return this.InvoicesField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoicesField, value) != true)) {
                    this.InvoicesField = value;
                    this.RaisePropertyChanged("Invoices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.ShoppingList[] ShoppingLists {
            get {
                return this.ShoppingListsField;
            }
            set {
                if ((object.ReferenceEquals(this.ShoppingListsField, value) != true)) {
                    this.ShoppingListsField = value;
                    this.RaisePropertyChanged("ShoppingLists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTypeField, value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Address : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Line1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Line2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrimaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProvinceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuburbField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Line1 {
            get {
                return this.Line1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Line1Field, value) != true)) {
                    this.Line1Field = value;
                    this.RaisePropertyChanged("Line1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Line2 {
            get {
                return this.Line2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Line2Field, value) != true)) {
                    this.Line2Field = value;
                    this.RaisePropertyChanged("Line2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Primary {
            get {
                return this.PrimaryField;
            }
            set {
                if ((this.PrimaryField.Equals(value) != true)) {
                    this.PrimaryField = value;
                    this.RaisePropertyChanged("Primary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Province {
            get {
                return this.ProvinceField;
            }
            set {
                if ((object.ReferenceEquals(this.ProvinceField, value) != true)) {
                    this.ProvinceField = value;
                    this.RaisePropertyChanged("Province");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Suburb {
            get {
                return this.SuburbField;
            }
            set {
                if ((object.ReferenceEquals(this.SuburbField, value) != true)) {
                    this.SuburbField = value;
                    this.RaisePropertyChanged("Suburb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((this.ZipField.Equals(value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpiryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Expiry {
            get {
                return this.ExpiryField;
            }
            set {
                if ((this.ExpiryField.Equals(value) != true)) {
                    this.ExpiryField = value;
                    this.RaisePropertyChanged("Expiry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Device : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeviceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceID {
            get {
                return this.DeviceIDField;
            }
            set {
                if ((this.DeviceIDField.Equals(value) != true)) {
                    this.DeviceIDField = value;
                    this.RaisePropertyChanged("DeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OS {
            get {
                return this.OSField;
            }
            set {
                if ((object.ReferenceEquals(this.OSField, value) != true)) {
                    this.OSField = value;
                    this.RaisePropertyChanged("OS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductCategory", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ProductCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.SubCategory[] SubCategoriesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.SubCategory[] SubCategories {
            get {
                return this.SubCategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.SubCategoriesField, value) != true)) {
                    this.SubCategoriesField = value;
                    this.RaisePropertyChanged("SubCategories");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="recommended", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class recommended : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GreenPantryFrontend.ServiceReference1.Product productField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ratingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenPantryFrontend.ServiceReference1.Product product {
            get {
                return this.productField;
            }
            set {
                if ((object.ReferenceEquals(this.productField, value) != true)) {
                    this.productField = value;
                    this.RaisePropertyChanged("product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double rating {
            get {
                return this.ratingField;
            }
            set {
                if ((this.ratingField.Equals(value) != true)) {
                    this.ratingField = value;
                    this.RaisePropertyChanged("rating");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SiteSetting", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class SiteSetting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Field1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Field2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Field3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Field4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Field1 {
            get {
                return this.Field1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Field1Field, value) != true)) {
                    this.Field1Field = value;
                    this.RaisePropertyChanged("Field1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Field2 {
            get {
                return this.Field2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Field2Field, value) != true)) {
                    this.Field2Field = value;
                    this.RaisePropertyChanged("Field2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Field3 {
            get {
                return this.Field3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Field3Field, value) != true)) {
                    this.Field3Field = value;
                    this.RaisePropertyChanged("Field3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Field4 {
            get {
                return this.Field4Field;
            }
            set {
                if ((object.ReferenceEquals(this.Field4Field, value) != true)) {
                    this.Field4Field = value;
                    this.RaisePropertyChanged("Field4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IGP_Service")]
    public interface IGP_Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percentageUserChange", ReplyAction="http://tempuri.org/IGP_Service/percentageUserChangeResponse")]
        double percentageUserChange(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percentageUserChange", ReplyAction="http://tempuri.org/IGP_Service/percentageUserChangeResponse")]
        System.Threading.Tasks.Task<double> percentageUserChangeAsync(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getWeekDates", ReplyAction="http://tempuri.org/IGP_Service/getWeekDatesResponse")]
        System.DateTime[] getWeekDates(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getWeekDates", ReplyAction="http://tempuri.org/IGP_Service/getWeekDatesResponse")]
        System.Threading.Tasks.Task<System.DateTime[]> getWeekDatesAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/salesPerWeek", ReplyAction="http://tempuri.org/IGP_Service/salesPerWeekResponse")]
        decimal salesPerWeek(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/salesPerWeek", ReplyAction="http://tempuri.org/IGP_Service/salesPerWeekResponse")]
        System.Threading.Tasks.Task<decimal> salesPerWeekAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percentageSaleChanger", ReplyAction="http://tempuri.org/IGP_Service/percentageSaleChangerResponse")]
        double percentageSaleChanger(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percentageSaleChanger", ReplyAction="http://tempuri.org/IGP_Service/percentageSaleChangerResponse")]
        System.Threading.Tasks.Task<double> percentageSaleChangerAsync(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/NumsalesPerWeek", ReplyAction="http://tempuri.org/IGP_Service/NumsalesPerWeekResponse")]
        int NumsalesPerWeek(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/NumsalesPerWeek", ReplyAction="http://tempuri.org/IGP_Service/NumsalesPerWeekResponse")]
        System.Threading.Tasks.Task<int> NumsalesPerWeekAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/NumSaleChange", ReplyAction="http://tempuri.org/IGP_Service/NumSaleChangeResponse")]
        double NumSaleChange(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/NumSaleChange", ReplyAction="http://tempuri.org/IGP_Service/NumSaleChangeResponse")]
        System.Threading.Tasks.Task<double> NumSaleChangeAsync(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calcCategoryTotalSales", ReplyAction="http://tempuri.org/IGP_Service/calcCategoryTotalSalesResponse")]
        decimal calcCategoryTotalSales(int cId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calcCategoryTotalSales", ReplyAction="http://tempuri.org/IGP_Service/calcCategoryTotalSalesResponse")]
        System.Threading.Tasks.Task<decimal> calcCategoryTotalSalesAsync(int cId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calcSalesPerDay", ReplyAction="http://tempuri.org/IGP_Service/calcSalesPerDayResponse")]
        decimal calcSalesPerDay(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calcSalesPerDay", ReplyAction="http://tempuri.org/IGP_Service/calcSalesPerDayResponse")]
        System.Threading.Tasks.Task<decimal> calcSalesPerDayAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getMonthDates", ReplyAction="http://tempuri.org/IGP_Service/getMonthDatesResponse")]
        System.DateTime[] getMonthDates(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getMonthDates", ReplyAction="http://tempuri.org/IGP_Service/getMonthDatesResponse")]
        System.Threading.Tasks.Task<System.DateTime[]> getMonthDatesAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/numProductSales", ReplyAction="http://tempuri.org/IGP_Service/numProductSalesResponse")]
        int numProductSales(System.DateTime currentDate, int Product_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/numProductSales", ReplyAction="http://tempuri.org/IGP_Service/numProductSalesResponse")]
        System.Threading.Tasks.Task<int> numProductSalesAsync(System.DateTime currentDate, int Product_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percProductSales", ReplyAction="http://tempuri.org/IGP_Service/percProductSalesResponse")]
        double percProductSales(System.DateTime currentDate, int Product_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percProductSales", ReplyAction="http://tempuri.org/IGP_Service/percProductSalesResponse")]
        System.Threading.Tasks.Task<double> percProductSalesAsync(System.DateTime currentDate, int Product_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getfilteredProducts", ReplyAction="http://tempuri.org/IGP_Service/getfilteredProductsResponse")]
        GreenPantryFrontend.ServiceReference1.Product[] getfilteredProducts(int minPrice, int maxPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getfilteredProducts", ReplyAction="http://tempuri.org/IGP_Service/getfilteredProductsResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> getfilteredProductsAsync(int minPrice, int maxPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addTraffic", ReplyAction="http://tempuri.org/IGP_Service/addTrafficResponse")]
        int addTraffic(string pageName, System.DateTime currentdate, int unique);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addTraffic", ReplyAction="http://tempuri.org/IGP_Service/addTrafficResponse")]
        System.Threading.Tasks.Task<int> addTrafficAsync(string pageName, System.DateTime currentdate, int unique);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/singlePageTraffic", ReplyAction="http://tempuri.org/IGP_Service/singlePageTrafficResponse")]
        int singlePageTraffic(string pageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/singlePageTraffic", ReplyAction="http://tempuri.org/IGP_Service/singlePageTrafficResponse")]
        System.Threading.Tasks.Task<int> singlePageTrafficAsync(string pageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/trafficPerWeek", ReplyAction="http://tempuri.org/IGP_Service/trafficPerWeekResponse")]
        int trafficPerWeek(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/trafficPerWeek", ReplyAction="http://tempuri.org/IGP_Service/trafficPerWeekResponse")]
        System.Threading.Tasks.Task<int> trafficPerWeekAsync(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/TrafficChange", ReplyAction="http://tempuri.org/IGP_Service/TrafficChangeResponse")]
        double TrafficChange(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/TrafficChange", ReplyAction="http://tempuri.org/IGP_Service/TrafficChangeResponse")]
        System.Threading.Tasks.Task<double> TrafficChangeAsync(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/singlePageUniqueTraffic", ReplyAction="http://tempuri.org/IGP_Service/singlePageUniqueTrafficResponse")]
        int singlePageUniqueTraffic(string pageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/singlePageUniqueTraffic", ReplyAction="http://tempuri.org/IGP_Service/singlePageUniqueTrafficResponse")]
        System.Threading.Tasks.Task<int> singlePageUniqueTrafficAsync(string pageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/topPages", ReplyAction="http://tempuri.org/IGP_Service/topPagesResponse")]
        string[] topPages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/topPages", ReplyAction="http://tempuri.org/IGP_Service/topPagesResponse")]
        System.Threading.Tasks.Task<string[]> topPagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percentageCategorySales", ReplyAction="http://tempuri.org/IGP_Service/percentageCategorySalesResponse")]
        double percentageCategorySales(System.DateTime currentDate, int Cat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percentageCategorySales", ReplyAction="http://tempuri.org/IGP_Service/percentageCategorySalesResponse")]
        System.Threading.Tasks.Task<double> percentageCategorySalesAsync(System.DateTime currentDate, int Cat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/numProductSalesperCategory", ReplyAction="http://tempuri.org/IGP_Service/numProductSalesperCategoryResponse")]
        int numProductSalesperCategory(System.DateTime currentDate, int Cat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/numProductSalesperCategory", ReplyAction="http://tempuri.org/IGP_Service/numProductSalesperCategoryResponse")]
        System.Threading.Tasks.Task<int> numProductSalesperCategoryAsync(System.DateTime currentDate, int Cat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percentageSubCategorySales", ReplyAction="http://tempuri.org/IGP_Service/percentageSubCategorySalesResponse")]
        double percentageSubCategorySales(System.DateTime currentDate, int SubCat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percentageSubCategorySales", ReplyAction="http://tempuri.org/IGP_Service/percentageSubCategorySalesResponse")]
        System.Threading.Tasks.Task<double> percentageSubCategorySalesAsync(System.DateTime currentDate, int SubCat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/numProductSalesperSubCategory", ReplyAction="http://tempuri.org/IGP_Service/numProductSalesperSubCategoryResponse")]
        int numProductSalesperSubCategory(System.DateTime currentDate, int SubCat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/numProductSalesperSubCategory", ReplyAction="http://tempuri.org/IGP_Service/numProductSalesperSubCategoryResponse")]
        System.Threading.Tasks.Task<int> numProductSalesperSubCategoryAsync(System.DateTime currentDate, int SubCat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/TopProducts", ReplyAction="http://tempuri.org/IGP_Service/TopProductsResponse")]
        int[] TopProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/TopProducts", ReplyAction="http://tempuri.org/IGP_Service/TopProductsResponse")]
        System.Threading.Tasks.Task<int[]> TopProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getProQtySold", ReplyAction="http://tempuri.org/IGP_Service/getProQtySoldResponse")]
        int getProQtySold(int P_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getProQtySold", ReplyAction="http://tempuri.org/IGP_Service/getProQtySoldResponse")]
        System.Threading.Tasks.Task<int> getProQtySoldAsync(int P_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/recommendTest", ReplyAction="http://tempuri.org/IGP_Service/recommendTestResponse")]
        GreenPantryFrontend.ServiceReference1.recommended[] recommendTest(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/recommendTest", ReplyAction="http://tempuri.org/IGP_Service/recommendTestResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.recommended[]> recommendTestAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percProfitPerWeek", ReplyAction="http://tempuri.org/IGP_Service/percProfitPerWeekResponse")]
        double percProfitPerWeek(System.DateTime currenDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/percProfitPerWeek", ReplyAction="http://tempuri.org/IGP_Service/percProfitPerWeekResponse")]
        System.Threading.Tasks.Task<double> percProfitPerWeekAsync(System.DateTime currenDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/totalProfitPerWeek", ReplyAction="http://tempuri.org/IGP_Service/totalProfitPerWeekResponse")]
        double totalProfitPerWeek(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/totalProfitPerWeek", ReplyAction="http://tempuri.org/IGP_Service/totalProfitPerWeekResponse")]
        System.Threading.Tasks.Task<double> totalProfitPerWeekAsync(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllDevices", ReplyAction="http://tempuri.org/IGP_Service/getAllDevicesResponse")]
        string[] getAllDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllDevices", ReplyAction="http://tempuri.org/IGP_Service/getAllDevicesResponse")]
        System.Threading.Tasks.Task<string[]> getAllDevicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getTotOSUsers", ReplyAction="http://tempuri.org/IGP_Service/getTotOSUsersResponse")]
        int getTotOSUsers(string os);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getTotOSUsers", ReplyAction="http://tempuri.org/IGP_Service/getTotOSUsersResponse")]
        System.Threading.Tasks.Task<int> getTotOSUsersAsync(string os);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/WorstProducts", ReplyAction="http://tempuri.org/IGP_Service/WorstProductsResponse")]
        int[] WorstProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/WorstProducts", ReplyAction="http://tempuri.org/IGP_Service/WorstProductsResponse")]
        System.Threading.Tasks.Task<int[]> WorstProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/newsletter", ReplyAction="http://tempuri.org/IGP_Service/newsletterResponse")]
        void newsletter(string senderemail, string subscriberemail, string subject, string body, string password, string smtp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/newsletter", ReplyAction="http://tempuri.org/IGP_Service/newsletterResponse")]
        System.Threading.Tasks.Task newsletterAsync(string senderemail, string subscriberemail, string subject, string body, string password, string smtp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getSetting", ReplyAction="http://tempuri.org/IGP_Service/getSettingResponse")]
        GreenPantryFrontend.ServiceReference1.SiteSetting getSetting(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getSetting", ReplyAction="http://tempuri.org/IGP_Service/getSettingResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.SiteSetting> getSettingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateSettings", ReplyAction="http://tempuri.org/IGP_Service/updateSettingsResponse")]
        int updateSettings(int id, string field1, string field2, string field3, string field4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateSettings", ReplyAction="http://tempuri.org/IGP_Service/updateSettingsResponse")]
        System.Threading.Tasks.Task<int> updateSettingsAsync(int id, string field1, string field2, string field3, string field4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/login", ReplyAction="http://tempuri.org/IGP_Service/loginResponse")]
        int login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/login", ReplyAction="http://tempuri.org/IGP_Service/loginResponse")]
        System.Threading.Tasks.Task<int> loginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/register", ReplyAction="http://tempuri.org/IGP_Service/registerResponse")]
        int register(string name, string surname, string email, string password, string status, System.DateTime date, string userType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/register", ReplyAction="http://tempuri.org/IGP_Service/registerResponse")]
        System.Threading.Tasks.Task<int> registerAsync(string name, string surname, string email, string password, string status, System.DateTime date, string userType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/removeUser", ReplyAction="http://tempuri.org/IGP_Service/removeUserResponse")]
        int removeUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/removeUser", ReplyAction="http://tempuri.org/IGP_Service/removeUserResponse")]
        System.Threading.Tasks.Task<int> removeUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateUserDetails", ReplyAction="http://tempuri.org/IGP_Service/updateUserDetailsResponse")]
        int updateUserDetails(int id, string name, string surname, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateUserDetails", ReplyAction="http://tempuri.org/IGP_Service/updateUserDetailsResponse")]
        System.Threading.Tasks.Task<int> updateUserDetailsAsync(int id, string name, string surname, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateUserAdmin", ReplyAction="http://tempuri.org/IGP_Service/updateUserAdminResponse")]
        int updateUserAdmin(int userID, int points, string usertype, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateUserAdmin", ReplyAction="http://tempuri.org/IGP_Service/updateUserAdminResponse")]
        System.Threading.Tasks.Task<int> updateUserAdminAsync(int userID, int points, string usertype, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updatePassword", ReplyAction="http://tempuri.org/IGP_Service/updatePasswordResponse")]
        int updatePassword(int id, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updatePassword", ReplyAction="http://tempuri.org/IGP_Service/updatePasswordResponse")]
        System.Threading.Tasks.Task<int> updatePasswordAsync(int id, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getUser", ReplyAction="http://tempuri.org/IGP_Service/getUserResponse")]
        GreenPantryFrontend.ServiceReference1.User getUser(int User_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getUser", ReplyAction="http://tempuri.org/IGP_Service/getUserResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.User> getUserAsync(int User_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllUsers", ReplyAction="http://tempuri.org/IGP_Service/getAllUsersResponse")]
        GreenPantryFrontend.ServiceReference1.User[] getAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllUsers", ReplyAction="http://tempuri.org/IGP_Service/getAllUsersResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.User[]> getAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getNumUsers", ReplyAction="http://tempuri.org/IGP_Service/getNumUsersResponse")]
        int getNumUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getNumUsers", ReplyAction="http://tempuri.org/IGP_Service/getNumUsersResponse")]
        System.Threading.Tasks.Task<int> getNumUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updatePoints", ReplyAction="http://tempuri.org/IGP_Service/updatePointsResponse")]
        int updatePoints(int Cust_ID, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updatePoints", ReplyAction="http://tempuri.org/IGP_Service/updatePointsResponse")]
        System.Threading.Tasks.Task<int> updatePointsAsync(int Cust_ID, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getUserPoints", ReplyAction="http://tempuri.org/IGP_Service/getUserPointsResponse")]
        int getUserPoints(int Cus_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getUserPoints", ReplyAction="http://tempuri.org/IGP_Service/getUserPointsResponse")]
        System.Threading.Tasks.Task<int> getUserPointsAsync(int Cus_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addNewProduct", ReplyAction="http://tempuri.org/IGP_Service/addNewProductResponse")]
        int addNewProduct(string name, int SubID, double price, double cost, int stockQty, string imgLocation, string status, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addNewProduct", ReplyAction="http://tempuri.org/IGP_Service/addNewProductResponse")]
        System.Threading.Tasks.Task<int> addNewProductAsync(string name, int SubID, double price, double cost, int stockQty, string imgLocation, string status, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateProduct", ReplyAction="http://tempuri.org/IGP_Service/updateProductResponse")]
        int updateProduct(int id, string name, int SubId, double price, double cost, string imgLocation, string status, int stock, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateProduct", ReplyAction="http://tempuri.org/IGP_Service/updateProductResponse")]
        System.Threading.Tasks.Task<int> updateProductAsync(int id, string name, int SubId, double price, double cost, string imgLocation, string status, int stock, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllProducts", ReplyAction="http://tempuri.org/IGP_Service/getAllProductsResponse")]
        GreenPantryFrontend.ServiceReference1.Product[] getAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllProducts", ReplyAction="http://tempuri.org/IGP_Service/getAllProductsResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> getAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/removeProduct", ReplyAction="http://tempuri.org/IGP_Service/removeProductResponse")]
        int removeProduct(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/removeProduct", ReplyAction="http://tempuri.org/IGP_Service/removeProductResponse")]
        System.Threading.Tasks.Task<int> removeProductAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getProduct", ReplyAction="http://tempuri.org/IGP_Service/getProductResponse")]
        GreenPantryFrontend.ServiceReference1.Product getProduct(int Product_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getProduct", ReplyAction="http://tempuri.org/IGP_Service/getProductResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product> getProductAsync(int Product_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateStock", ReplyAction="http://tempuri.org/IGP_Service/updateStockResponse")]
        int updateStock(int P_ID, int ItemsPurchased);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateStock", ReplyAction="http://tempuri.org/IGP_Service/updateStockResponse")]
        System.Threading.Tasks.Task<int> updateStockAsync(int P_ID, int ItemsPurchased);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getProductByCat", ReplyAction="http://tempuri.org/IGP_Service/getProductByCatResponse")]
        GreenPantryFrontend.ServiceReference1.Product[] getProductByCat(int Cat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getProductByCat", ReplyAction="http://tempuri.org/IGP_Service/getProductByCatResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> getProductByCatAsync(int Cat_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getProductBySubCat", ReplyAction="http://tempuri.org/IGP_Service/getProductBySubCatResponse")]
        GreenPantryFrontend.ServiceReference1.Product[] getProductBySubCat(int Sub_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getProductBySubCat", ReplyAction="http://tempuri.org/IGP_Service/getProductBySubCatResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> getProductBySubCatAsync(int Sub_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/searchProducts", ReplyAction="http://tempuri.org/IGP_Service/searchProductsResponse")]
        GreenPantryFrontend.ServiceReference1.Product[] searchProducts(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/searchProducts", ReplyAction="http://tempuri.org/IGP_Service/searchProductsResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> searchProductsAsync(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllCategories", ReplyAction="http://tempuri.org/IGP_Service/getAllCategoriesResponse")]
        GreenPantryFrontend.ServiceReference1.ProductCategory[] getAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllCategories", ReplyAction="http://tempuri.org/IGP_Service/getAllCategoriesResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.ProductCategory[]> getAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getCat", ReplyAction="http://tempuri.org/IGP_Service/getCatResponse")]
        GreenPantryFrontend.ServiceReference1.ProductCategory getCat(int C_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getCat", ReplyAction="http://tempuri.org/IGP_Service/getCatResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.ProductCategory> getCatAsync(int C_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getCategorybyProductID", ReplyAction="http://tempuri.org/IGP_Service/getCategorybyProductIDResponse")]
        GreenPantryFrontend.ServiceReference1.ProductCategory getCategorybyProductID(int p_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getCategorybyProductID", ReplyAction="http://tempuri.org/IGP_Service/getCategorybyProductIDResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.ProductCategory> getCategorybyProductIDAsync(int p_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addCategory", ReplyAction="http://tempuri.org/IGP_Service/addCategoryResponse")]
        int addCategory(string name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addCategory", ReplyAction="http://tempuri.org/IGP_Service/addCategoryResponse")]
        System.Threading.Tasks.Task<int> addCategoryAsync(string name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateCategories", ReplyAction="http://tempuri.org/IGP_Service/updateCategoriesResponse")]
        int updateCategories(int id, string name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateCategories", ReplyAction="http://tempuri.org/IGP_Service/updateCategoriesResponse")]
        System.Threading.Tasks.Task<int> updateCategoriesAsync(int id, string name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllSubCategories", ReplyAction="http://tempuri.org/IGP_Service/getAllSubCategoriesResponse")]
        GreenPantryFrontend.ServiceReference1.SubCategory[] getAllSubCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllSubCategories", ReplyAction="http://tempuri.org/IGP_Service/getAllSubCategoriesResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.SubCategory[]> getAllSubCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getSubCat", ReplyAction="http://tempuri.org/IGP_Service/getSubCatResponse")]
        GreenPantryFrontend.ServiceReference1.SubCategory getSubCat(int S_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getSubCat", ReplyAction="http://tempuri.org/IGP_Service/getSubCatResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.SubCategory> getSubCatAsync(int S_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getSubCatPerCat", ReplyAction="http://tempuri.org/IGP_Service/getSubCatPerCatResponse")]
        GreenPantryFrontend.ServiceReference1.SubCategory[] getSubCatPerCat(int c_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getSubCatPerCat", ReplyAction="http://tempuri.org/IGP_Service/getSubCatPerCatResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.SubCategory[]> getSubCatPerCatAsync(int c_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addSubCategory", ReplyAction="http://tempuri.org/IGP_Service/addSubCategoryResponse")]
        int addSubCategory(int catid, string name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addSubCategory", ReplyAction="http://tempuri.org/IGP_Service/addSubCategoryResponse")]
        System.Threading.Tasks.Task<int> addSubCategoryAsync(int catid, string name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateSubCategories", ReplyAction="http://tempuri.org/IGP_Service/updateSubCategoriesResponse")]
        int updateSubCategories(int id, int cat_ID, string name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateSubCategories", ReplyAction="http://tempuri.org/IGP_Service/updateSubCategoriesResponse")]
        System.Threading.Tasks.Task<int> updateSubCategoriesAsync(int id, int cat_ID, string name, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getInvoice", ReplyAction="http://tempuri.org/IGP_Service/getInvoiceResponse")]
        GreenPantryFrontend.ServiceReference1.Invoice getInvoice(int InvoiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getInvoice", ReplyAction="http://tempuri.org/IGP_Service/getInvoiceResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Invoice> getInvoiceAsync(int InvoiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addInvoice", ReplyAction="http://tempuri.org/IGP_Service/addInvoiceResponse")]
        int addInvoice(int customerId, string status, System.DateTime datePlaced, System.DateTime deliverDate, string message, decimal total, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addInvoice", ReplyAction="http://tempuri.org/IGP_Service/addInvoiceResponse")]
        System.Threading.Tasks.Task<int> addInvoiceAsync(int customerId, string status, System.DateTime datePlaced, System.DateTime deliverDate, string message, decimal total, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateInvoice", ReplyAction="http://tempuri.org/IGP_Service/updateInvoiceResponse")]
        int updateInvoice(int customerId, string status, System.DateTime datePlaced, System.DateTime deliverDate, string message, decimal total, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateInvoice", ReplyAction="http://tempuri.org/IGP_Service/updateInvoiceResponse")]
        System.Threading.Tasks.Task<int> updateInvoiceAsync(int customerId, string status, System.DateTime datePlaced, System.DateTime deliverDate, string message, decimal total, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllInvoices", ReplyAction="http://tempuri.org/IGP_Service/getAllInvoicesResponse")]
        GreenPantryFrontend.ServiceReference1.Invoice[] getAllInvoices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllInvoices", ReplyAction="http://tempuri.org/IGP_Service/getAllInvoicesResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Invoice[]> getAllInvoicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllCustomerInvoices", ReplyAction="http://tempuri.org/IGP_Service/getAllCustomerInvoicesResponse")]
        GreenPantryFrontend.ServiceReference1.Invoice[] getAllCustomerInvoices(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllCustomerInvoices", ReplyAction="http://tempuri.org/IGP_Service/getAllCustomerInvoicesResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Invoice[]> getAllCustomerInvoicesAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllInvoiceLines", ReplyAction="http://tempuri.org/IGP_Service/getAllInvoiceLinesResponse")]
        GreenPantryFrontend.ServiceReference1.InvoiceLine[] getAllInvoiceLines(int InvoiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAllInvoiceLines", ReplyAction="http://tempuri.org/IGP_Service/getAllInvoiceLinesResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.InvoiceLine[]> getAllInvoiceLinesAsync(int InvoiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addInvoiceLine", ReplyAction="http://tempuri.org/IGP_Service/addInvoiceLineResponse")]
        int addInvoiceLine(int product_ID, int invoice_ID, int quantity, decimal price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addInvoiceLine", ReplyAction="http://tempuri.org/IGP_Service/addInvoiceLineResponse")]
        System.Threading.Tasks.Task<int> addInvoiceLineAsync(int product_ID, int invoice_ID, int quantity, decimal price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addToList", ReplyAction="http://tempuri.org/IGP_Service/addToListResponse")]
        int addToList(int userID, int productID, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addToList", ReplyAction="http://tempuri.org/IGP_Service/addToListResponse")]
        System.Threading.Tasks.Task<int> addToListAsync(int userID, int productID, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getList", ReplyAction="http://tempuri.org/IGP_Service/getListResponse")]
        GreenPantryFrontend.ServiceReference1.ShoppingList[] getList(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getList", ReplyAction="http://tempuri.org/IGP_Service/getListResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.ShoppingList[]> getListAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateList", ReplyAction="http://tempuri.org/IGP_Service/updateListResponse")]
        int updateList(int userID, int P_ID, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateList", ReplyAction="http://tempuri.org/IGP_Service/updateListResponse")]
        System.Threading.Tasks.Task<int> updateListAsync(int userID, int P_ID, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/removeList", ReplyAction="http://tempuri.org/IGP_Service/removeListResponse")]
        int removeList(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/removeList", ReplyAction="http://tempuri.org/IGP_Service/removeListResponse")]
        System.Threading.Tasks.Task<int> removeListAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAddress", ReplyAction="http://tempuri.org/IGP_Service/getAddressResponse")]
        GreenPantryFrontend.ServiceReference1.Address getAddress(int addID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getAddress", ReplyAction="http://tempuri.org/IGP_Service/getAddressResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Address> getAddressAsync(int addID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getUserAddresses", ReplyAction="http://tempuri.org/IGP_Service/getUserAddressesResponse")]
        GreenPantryFrontend.ServiceReference1.Address[] getUserAddresses(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getUserAddresses", ReplyAction="http://tempuri.org/IGP_Service/getUserAddressesResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Address[]> getUserAddressesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getPrimaryAddress", ReplyAction="http://tempuri.org/IGP_Service/getPrimaryAddressResponse")]
        GreenPantryFrontend.ServiceReference1.Address getPrimaryAddress(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getPrimaryAddress", ReplyAction="http://tempuri.org/IGP_Service/getPrimaryAddressResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Address> getPrimaryAddressAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addAddress", ReplyAction="http://tempuri.org/IGP_Service/addAddressResponse")]
        int addAddress(string line1, string line2, string suburb, string city, int zip, string type, int C_ID, string Province, int primary, string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addAddress", ReplyAction="http://tempuri.org/IGP_Service/addAddressResponse")]
        System.Threading.Tasks.Task<int> addAddressAsync(string line1, string line2, string suburb, string city, int zip, string type, int C_ID, string Province, int primary, string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateAddress", ReplyAction="http://tempuri.org/IGP_Service/updateAddressResponse")]
        int updateAddress(string line1, string line2, string suburb, string city, string province, int zip, string type, int addID, int primary, string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateAddress", ReplyAction="http://tempuri.org/IGP_Service/updateAddressResponse")]
        System.Threading.Tasks.Task<int> updateAddressAsync(string line1, string line2, string suburb, string city, string province, int zip, string type, int addID, int primary, string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/deleteAddress", ReplyAction="http://tempuri.org/IGP_Service/deleteAddressResponse")]
        int deleteAddress(int addressID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/deleteAddress", ReplyAction="http://tempuri.org/IGP_Service/deleteAddressResponse")]
        System.Threading.Tasks.Task<int> deleteAddressAsync(int addressID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getCard", ReplyAction="http://tempuri.org/IGP_Service/getCardResponse")]
        GreenPantryFrontend.ServiceReference1.Card getCard(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getCard", ReplyAction="http://tempuri.org/IGP_Service/getCardResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Card> getCardAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addCard", ReplyAction="http://tempuri.org/IGP_Service/addCardResponse")]
        int addCard(int Cus_ID, string description, string name, string number, System.DateTime expiry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addCard", ReplyAction="http://tempuri.org/IGP_Service/addCardResponse")]
        System.Threading.Tasks.Task<int> addCardAsync(int Cus_ID, string description, string name, string number, System.DateTime expiry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateCards", ReplyAction="http://tempuri.org/IGP_Service/updateCardsResponse")]
        int updateCards(int c_ID, int Cust_ID, string description, string name, string number, System.DateTime expiry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/updateCards", ReplyAction="http://tempuri.org/IGP_Service/updateCardsResponse")]
        System.Threading.Tasks.Task<int> updateCardsAsync(int c_ID, int Cust_ID, string description, string name, string number, System.DateTime expiry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getDevice", ReplyAction="http://tempuri.org/IGP_Service/getDeviceResponse")]
        GreenPantryFrontend.ServiceReference1.Device getDevice(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getDevice", ReplyAction="http://tempuri.org/IGP_Service/getDeviceResponse")]
        System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Device> getDeviceAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addDevices", ReplyAction="http://tempuri.org/IGP_Service/addDevicesResponse")]
        int addDevices(int cust_ID, string useragent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/addDevices", ReplyAction="http://tempuri.org/IGP_Service/addDevicesResponse")]
        System.Threading.Tasks.Task<int> addDevicesAsync(int cust_ID, string useragent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getUsersPerDay", ReplyAction="http://tempuri.org/IGP_Service/getUsersPerDayResponse")]
        int getUsersPerDay(System.DateTime day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getUsersPerDay", ReplyAction="http://tempuri.org/IGP_Service/getUsersPerDayResponse")]
        System.Threading.Tasks.Task<int> getUsersPerDayAsync(System.DateTime day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calculateProfit", ReplyAction="http://tempuri.org/IGP_Service/calculateProfitResponse")]
        double calculateProfit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calculateProfit", ReplyAction="http://tempuri.org/IGP_Service/calculateProfitResponse")]
        System.Threading.Tasks.Task<double> calculateProfitAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/profitPerProduct", ReplyAction="http://tempuri.org/IGP_Service/profitPerProductResponse")]
        double profitPerProduct(int P_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/profitPerProduct", ReplyAction="http://tempuri.org/IGP_Service/profitPerProductResponse")]
        System.Threading.Tasks.Task<double> profitPerProductAsync(int P_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/profitPerSubCat", ReplyAction="http://tempuri.org/IGP_Service/profitPerSubCatResponse")]
        double profitPerSubCat(int S_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/profitPerSubCat", ReplyAction="http://tempuri.org/IGP_Service/profitPerSubCatResponse")]
        System.Threading.Tasks.Task<double> profitPerSubCatAsync(int S_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/profitPerCat", ReplyAction="http://tempuri.org/IGP_Service/profitPerCatResponse")]
        double profitPerCat(int C_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/profitPerCat", ReplyAction="http://tempuri.org/IGP_Service/profitPerCatResponse")]
        System.Threading.Tasks.Task<double> profitPerCatAsync(int C_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calcProfitPerday", ReplyAction="http://tempuri.org/IGP_Service/calcProfitPerdayResponse")]
        decimal calcProfitPerday(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calcProfitPerday", ReplyAction="http://tempuri.org/IGP_Service/calcProfitPerdayResponse")]
        System.Threading.Tasks.Task<decimal> calcProfitPerdayAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calcProductVAT", ReplyAction="http://tempuri.org/IGP_Service/calcProductVATResponse")]
        decimal calcProductVAT(int P_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/calcProductVAT", ReplyAction="http://tempuri.org/IGP_Service/calcProductVATResponse")]
        System.Threading.Tasks.Task<decimal> calcProductVATAsync(int P_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getNumProductsInSub", ReplyAction="http://tempuri.org/IGP_Service/getNumProductsInSubResponse")]
        int getNumProductsInSub(int subID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/getNumProductsInSub", ReplyAction="http://tempuri.org/IGP_Service/getNumProductsInSubResponse")]
        System.Threading.Tasks.Task<int> getNumProductsInSubAsync(int subID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/usersperWeek", ReplyAction="http://tempuri.org/IGP_Service/usersperWeekResponse")]
        int usersperWeek(System.DateTime currentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGP_Service/usersperWeek", ReplyAction="http://tempuri.org/IGP_Service/usersperWeekResponse")]
        System.Threading.Tasks.Task<int> usersperWeekAsync(System.DateTime currentDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGP_ServiceChannel : GreenPantryFrontend.ServiceReference1.IGP_Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GP_ServiceClient : System.ServiceModel.ClientBase<GreenPantryFrontend.ServiceReference1.IGP_Service>, GreenPantryFrontend.ServiceReference1.IGP_Service {
        
        public GP_ServiceClient() {
        }
        
        public GP_ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GP_ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GP_ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GP_ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double percentageUserChange(System.DateTime currentDate) {
            return base.Channel.percentageUserChange(currentDate);
        }
        
        public System.Threading.Tasks.Task<double> percentageUserChangeAsync(System.DateTime currentDate) {
            return base.Channel.percentageUserChangeAsync(currentDate);
        }
        
        public System.DateTime[] getWeekDates(System.DateTime date) {
            return base.Channel.getWeekDates(date);
        }
        
        public System.Threading.Tasks.Task<System.DateTime[]> getWeekDatesAsync(System.DateTime date) {
            return base.Channel.getWeekDatesAsync(date);
        }
        
        public decimal salesPerWeek(System.DateTime date) {
            return base.Channel.salesPerWeek(date);
        }
        
        public System.Threading.Tasks.Task<decimal> salesPerWeekAsync(System.DateTime date) {
            return base.Channel.salesPerWeekAsync(date);
        }
        
        public double percentageSaleChanger(System.DateTime currentDate) {
            return base.Channel.percentageSaleChanger(currentDate);
        }
        
        public System.Threading.Tasks.Task<double> percentageSaleChangerAsync(System.DateTime currentDate) {
            return base.Channel.percentageSaleChangerAsync(currentDate);
        }
        
        public int NumsalesPerWeek(System.DateTime date) {
            return base.Channel.NumsalesPerWeek(date);
        }
        
        public System.Threading.Tasks.Task<int> NumsalesPerWeekAsync(System.DateTime date) {
            return base.Channel.NumsalesPerWeekAsync(date);
        }
        
        public double NumSaleChange(System.DateTime currentDate) {
            return base.Channel.NumSaleChange(currentDate);
        }
        
        public System.Threading.Tasks.Task<double> NumSaleChangeAsync(System.DateTime currentDate) {
            return base.Channel.NumSaleChangeAsync(currentDate);
        }
        
        public decimal calcCategoryTotalSales(int cId) {
            return base.Channel.calcCategoryTotalSales(cId);
        }
        
        public System.Threading.Tasks.Task<decimal> calcCategoryTotalSalesAsync(int cId) {
            return base.Channel.calcCategoryTotalSalesAsync(cId);
        }
        
        public decimal calcSalesPerDay(System.DateTime date) {
            return base.Channel.calcSalesPerDay(date);
        }
        
        public System.Threading.Tasks.Task<decimal> calcSalesPerDayAsync(System.DateTime date) {
            return base.Channel.calcSalesPerDayAsync(date);
        }
        
        public System.DateTime[] getMonthDates(System.DateTime date) {
            return base.Channel.getMonthDates(date);
        }
        
        public System.Threading.Tasks.Task<System.DateTime[]> getMonthDatesAsync(System.DateTime date) {
            return base.Channel.getMonthDatesAsync(date);
        }
        
        public int numProductSales(System.DateTime currentDate, int Product_ID) {
            return base.Channel.numProductSales(currentDate, Product_ID);
        }
        
        public System.Threading.Tasks.Task<int> numProductSalesAsync(System.DateTime currentDate, int Product_ID) {
            return base.Channel.numProductSalesAsync(currentDate, Product_ID);
        }
        
        public double percProductSales(System.DateTime currentDate, int Product_ID) {
            return base.Channel.percProductSales(currentDate, Product_ID);
        }
        
        public System.Threading.Tasks.Task<double> percProductSalesAsync(System.DateTime currentDate, int Product_ID) {
            return base.Channel.percProductSalesAsync(currentDate, Product_ID);
        }
        
        public GreenPantryFrontend.ServiceReference1.Product[] getfilteredProducts(int minPrice, int maxPrice) {
            return base.Channel.getfilteredProducts(minPrice, maxPrice);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> getfilteredProductsAsync(int minPrice, int maxPrice) {
            return base.Channel.getfilteredProductsAsync(minPrice, maxPrice);
        }
        
        public int addTraffic(string pageName, System.DateTime currentdate, int unique) {
            return base.Channel.addTraffic(pageName, currentdate, unique);
        }
        
        public System.Threading.Tasks.Task<int> addTrafficAsync(string pageName, System.DateTime currentdate, int unique) {
            return base.Channel.addTrafficAsync(pageName, currentdate, unique);
        }
        
        public int singlePageTraffic(string pageName) {
            return base.Channel.singlePageTraffic(pageName);
        }
        
        public System.Threading.Tasks.Task<int> singlePageTrafficAsync(string pageName) {
            return base.Channel.singlePageTrafficAsync(pageName);
        }
        
        public int trafficPerWeek(System.DateTime currentDate) {
            return base.Channel.trafficPerWeek(currentDate);
        }
        
        public System.Threading.Tasks.Task<int> trafficPerWeekAsync(System.DateTime currentDate) {
            return base.Channel.trafficPerWeekAsync(currentDate);
        }
        
        public double TrafficChange(System.DateTime currentDate) {
            return base.Channel.TrafficChange(currentDate);
        }
        
        public System.Threading.Tasks.Task<double> TrafficChangeAsync(System.DateTime currentDate) {
            return base.Channel.TrafficChangeAsync(currentDate);
        }
        
        public int singlePageUniqueTraffic(string pageName) {
            return base.Channel.singlePageUniqueTraffic(pageName);
        }
        
        public System.Threading.Tasks.Task<int> singlePageUniqueTrafficAsync(string pageName) {
            return base.Channel.singlePageUniqueTrafficAsync(pageName);
        }
        
        public string[] topPages() {
            return base.Channel.topPages();
        }
        
        public System.Threading.Tasks.Task<string[]> topPagesAsync() {
            return base.Channel.topPagesAsync();
        }
        
        public double percentageCategorySales(System.DateTime currentDate, int Cat_ID) {
            return base.Channel.percentageCategorySales(currentDate, Cat_ID);
        }
        
        public System.Threading.Tasks.Task<double> percentageCategorySalesAsync(System.DateTime currentDate, int Cat_ID) {
            return base.Channel.percentageCategorySalesAsync(currentDate, Cat_ID);
        }
        
        public int numProductSalesperCategory(System.DateTime currentDate, int Cat_ID) {
            return base.Channel.numProductSalesperCategory(currentDate, Cat_ID);
        }
        
        public System.Threading.Tasks.Task<int> numProductSalesperCategoryAsync(System.DateTime currentDate, int Cat_ID) {
            return base.Channel.numProductSalesperCategoryAsync(currentDate, Cat_ID);
        }
        
        public double percentageSubCategorySales(System.DateTime currentDate, int SubCat_ID) {
            return base.Channel.percentageSubCategorySales(currentDate, SubCat_ID);
        }
        
        public System.Threading.Tasks.Task<double> percentageSubCategorySalesAsync(System.DateTime currentDate, int SubCat_ID) {
            return base.Channel.percentageSubCategorySalesAsync(currentDate, SubCat_ID);
        }
        
        public int numProductSalesperSubCategory(System.DateTime currentDate, int SubCat_ID) {
            return base.Channel.numProductSalesperSubCategory(currentDate, SubCat_ID);
        }
        
        public System.Threading.Tasks.Task<int> numProductSalesperSubCategoryAsync(System.DateTime currentDate, int SubCat_ID) {
            return base.Channel.numProductSalesperSubCategoryAsync(currentDate, SubCat_ID);
        }
        
        public int[] TopProducts() {
            return base.Channel.TopProducts();
        }
        
        public System.Threading.Tasks.Task<int[]> TopProductsAsync() {
            return base.Channel.TopProductsAsync();
        }
        
        public int getProQtySold(int P_ID) {
            return base.Channel.getProQtySold(P_ID);
        }
        
        public System.Threading.Tasks.Task<int> getProQtySoldAsync(int P_ID) {
            return base.Channel.getProQtySoldAsync(P_ID);
        }
        
        public GreenPantryFrontend.ServiceReference1.recommended[] recommendTest(int userID) {
            return base.Channel.recommendTest(userID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.recommended[]> recommendTestAsync(int userID) {
            return base.Channel.recommendTestAsync(userID);
        }
        
        public double percProfitPerWeek(System.DateTime currenDate) {
            return base.Channel.percProfitPerWeek(currenDate);
        }
        
        public System.Threading.Tasks.Task<double> percProfitPerWeekAsync(System.DateTime currenDate) {
            return base.Channel.percProfitPerWeekAsync(currenDate);
        }
        
        public double totalProfitPerWeek(System.DateTime currentDate) {
            return base.Channel.totalProfitPerWeek(currentDate);
        }
        
        public System.Threading.Tasks.Task<double> totalProfitPerWeekAsync(System.DateTime currentDate) {
            return base.Channel.totalProfitPerWeekAsync(currentDate);
        }
        
        public string[] getAllDevices() {
            return base.Channel.getAllDevices();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllDevicesAsync() {
            return base.Channel.getAllDevicesAsync();
        }
        
        public int getTotOSUsers(string os) {
            return base.Channel.getTotOSUsers(os);
        }
        
        public System.Threading.Tasks.Task<int> getTotOSUsersAsync(string os) {
            return base.Channel.getTotOSUsersAsync(os);
        }
        
        public int[] WorstProducts() {
            return base.Channel.WorstProducts();
        }
        
        public System.Threading.Tasks.Task<int[]> WorstProductsAsync() {
            return base.Channel.WorstProductsAsync();
        }
        
        public void newsletter(string senderemail, string subscriberemail, string subject, string body, string password, string smtp) {
            base.Channel.newsletter(senderemail, subscriberemail, subject, body, password, smtp);
        }
        
        public System.Threading.Tasks.Task newsletterAsync(string senderemail, string subscriberemail, string subject, string body, string password, string smtp) {
            return base.Channel.newsletterAsync(senderemail, subscriberemail, subject, body, password, smtp);
        }
        
        public GreenPantryFrontend.ServiceReference1.SiteSetting getSetting(int id) {
            return base.Channel.getSetting(id);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.SiteSetting> getSettingAsync(int id) {
            return base.Channel.getSettingAsync(id);
        }
        
        public int updateSettings(int id, string field1, string field2, string field3, string field4) {
            return base.Channel.updateSettings(id, field1, field2, field3, field4);
        }
        
        public System.Threading.Tasks.Task<int> updateSettingsAsync(int id, string field1, string field2, string field3, string field4) {
            return base.Channel.updateSettingsAsync(id, field1, field2, field3, field4);
        }
        
        public int login(string email, string password) {
            return base.Channel.login(email, password);
        }
        
        public System.Threading.Tasks.Task<int> loginAsync(string email, string password) {
            return base.Channel.loginAsync(email, password);
        }
        
        public int register(string name, string surname, string email, string password, string status, System.DateTime date, string userType) {
            return base.Channel.register(name, surname, email, password, status, date, userType);
        }
        
        public System.Threading.Tasks.Task<int> registerAsync(string name, string surname, string email, string password, string status, System.DateTime date, string userType) {
            return base.Channel.registerAsync(name, surname, email, password, status, date, userType);
        }
        
        public int removeUser(int id) {
            return base.Channel.removeUser(id);
        }
        
        public System.Threading.Tasks.Task<int> removeUserAsync(int id) {
            return base.Channel.removeUserAsync(id);
        }
        
        public int updateUserDetails(int id, string name, string surname, string email) {
            return base.Channel.updateUserDetails(id, name, surname, email);
        }
        
        public System.Threading.Tasks.Task<int> updateUserDetailsAsync(int id, string name, string surname, string email) {
            return base.Channel.updateUserDetailsAsync(id, name, surname, email);
        }
        
        public int updateUserAdmin(int userID, int points, string usertype, string status) {
            return base.Channel.updateUserAdmin(userID, points, usertype, status);
        }
        
        public System.Threading.Tasks.Task<int> updateUserAdminAsync(int userID, int points, string usertype, string status) {
            return base.Channel.updateUserAdminAsync(userID, points, usertype, status);
        }
        
        public int updatePassword(int id, string oldPassword, string newPassword) {
            return base.Channel.updatePassword(id, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<int> updatePasswordAsync(int id, string oldPassword, string newPassword) {
            return base.Channel.updatePasswordAsync(id, oldPassword, newPassword);
        }
        
        public GreenPantryFrontend.ServiceReference1.User getUser(int User_ID) {
            return base.Channel.getUser(User_ID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.User> getUserAsync(int User_ID) {
            return base.Channel.getUserAsync(User_ID);
        }
        
        public GreenPantryFrontend.ServiceReference1.User[] getAllUsers() {
            return base.Channel.getAllUsers();
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.User[]> getAllUsersAsync() {
            return base.Channel.getAllUsersAsync();
        }
        
        public int getNumUsers() {
            return base.Channel.getNumUsers();
        }
        
        public System.Threading.Tasks.Task<int> getNumUsersAsync() {
            return base.Channel.getNumUsersAsync();
        }
        
        public int updatePoints(int Cust_ID, int points) {
            return base.Channel.updatePoints(Cust_ID, points);
        }
        
        public System.Threading.Tasks.Task<int> updatePointsAsync(int Cust_ID, int points) {
            return base.Channel.updatePointsAsync(Cust_ID, points);
        }
        
        public int getUserPoints(int Cus_ID) {
            return base.Channel.getUserPoints(Cus_ID);
        }
        
        public System.Threading.Tasks.Task<int> getUserPointsAsync(int Cus_ID) {
            return base.Channel.getUserPointsAsync(Cus_ID);
        }
        
        public int addNewProduct(string name, int SubID, double price, double cost, int stockQty, string imgLocation, string status, string description) {
            return base.Channel.addNewProduct(name, SubID, price, cost, stockQty, imgLocation, status, description);
        }
        
        public System.Threading.Tasks.Task<int> addNewProductAsync(string name, int SubID, double price, double cost, int stockQty, string imgLocation, string status, string description) {
            return base.Channel.addNewProductAsync(name, SubID, price, cost, stockQty, imgLocation, status, description);
        }
        
        public int updateProduct(int id, string name, int SubId, double price, double cost, string imgLocation, string status, int stock, string description) {
            return base.Channel.updateProduct(id, name, SubId, price, cost, imgLocation, status, stock, description);
        }
        
        public System.Threading.Tasks.Task<int> updateProductAsync(int id, string name, int SubId, double price, double cost, string imgLocation, string status, int stock, string description) {
            return base.Channel.updateProductAsync(id, name, SubId, price, cost, imgLocation, status, stock, description);
        }
        
        public GreenPantryFrontend.ServiceReference1.Product[] getAllProducts() {
            return base.Channel.getAllProducts();
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> getAllProductsAsync() {
            return base.Channel.getAllProductsAsync();
        }
        
        public int removeProduct(int productId) {
            return base.Channel.removeProduct(productId);
        }
        
        public System.Threading.Tasks.Task<int> removeProductAsync(int productId) {
            return base.Channel.removeProductAsync(productId);
        }
        
        public GreenPantryFrontend.ServiceReference1.Product getProduct(int Product_ID) {
            return base.Channel.getProduct(Product_ID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product> getProductAsync(int Product_ID) {
            return base.Channel.getProductAsync(Product_ID);
        }
        
        public int updateStock(int P_ID, int ItemsPurchased) {
            return base.Channel.updateStock(P_ID, ItemsPurchased);
        }
        
        public System.Threading.Tasks.Task<int> updateStockAsync(int P_ID, int ItemsPurchased) {
            return base.Channel.updateStockAsync(P_ID, ItemsPurchased);
        }
        
        public GreenPantryFrontend.ServiceReference1.Product[] getProductByCat(int Cat_ID) {
            return base.Channel.getProductByCat(Cat_ID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> getProductByCatAsync(int Cat_ID) {
            return base.Channel.getProductByCatAsync(Cat_ID);
        }
        
        public GreenPantryFrontend.ServiceReference1.Product[] getProductBySubCat(int Sub_ID) {
            return base.Channel.getProductBySubCat(Sub_ID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> getProductBySubCatAsync(int Sub_ID) {
            return base.Channel.getProductBySubCatAsync(Sub_ID);
        }
        
        public GreenPantryFrontend.ServiceReference1.Product[] searchProducts(string input) {
            return base.Channel.searchProducts(input);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Product[]> searchProductsAsync(string input) {
            return base.Channel.searchProductsAsync(input);
        }
        
        public GreenPantryFrontend.ServiceReference1.ProductCategory[] getAllCategories() {
            return base.Channel.getAllCategories();
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.ProductCategory[]> getAllCategoriesAsync() {
            return base.Channel.getAllCategoriesAsync();
        }
        
        public GreenPantryFrontend.ServiceReference1.ProductCategory getCat(int C_ID) {
            return base.Channel.getCat(C_ID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.ProductCategory> getCatAsync(int C_ID) {
            return base.Channel.getCatAsync(C_ID);
        }
        
        public GreenPantryFrontend.ServiceReference1.ProductCategory getCategorybyProductID(int p_ID) {
            return base.Channel.getCategorybyProductID(p_ID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.ProductCategory> getCategorybyProductIDAsync(int p_ID) {
            return base.Channel.getCategorybyProductIDAsync(p_ID);
        }
        
        public int addCategory(string name, string status) {
            return base.Channel.addCategory(name, status);
        }
        
        public System.Threading.Tasks.Task<int> addCategoryAsync(string name, string status) {
            return base.Channel.addCategoryAsync(name, status);
        }
        
        public int updateCategories(int id, string name, string status) {
            return base.Channel.updateCategories(id, name, status);
        }
        
        public System.Threading.Tasks.Task<int> updateCategoriesAsync(int id, string name, string status) {
            return base.Channel.updateCategoriesAsync(id, name, status);
        }
        
        public GreenPantryFrontend.ServiceReference1.SubCategory[] getAllSubCategories() {
            return base.Channel.getAllSubCategories();
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.SubCategory[]> getAllSubCategoriesAsync() {
            return base.Channel.getAllSubCategoriesAsync();
        }
        
        public GreenPantryFrontend.ServiceReference1.SubCategory getSubCat(int S_ID) {
            return base.Channel.getSubCat(S_ID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.SubCategory> getSubCatAsync(int S_ID) {
            return base.Channel.getSubCatAsync(S_ID);
        }
        
        public GreenPantryFrontend.ServiceReference1.SubCategory[] getSubCatPerCat(int c_ID) {
            return base.Channel.getSubCatPerCat(c_ID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.SubCategory[]> getSubCatPerCatAsync(int c_ID) {
            return base.Channel.getSubCatPerCatAsync(c_ID);
        }
        
        public int addSubCategory(int catid, string name, string status) {
            return base.Channel.addSubCategory(catid, name, status);
        }
        
        public System.Threading.Tasks.Task<int> addSubCategoryAsync(int catid, string name, string status) {
            return base.Channel.addSubCategoryAsync(catid, name, status);
        }
        
        public int updateSubCategories(int id, int cat_ID, string name, string status) {
            return base.Channel.updateSubCategories(id, cat_ID, name, status);
        }
        
        public System.Threading.Tasks.Task<int> updateSubCategoriesAsync(int id, int cat_ID, string name, string status) {
            return base.Channel.updateSubCategoriesAsync(id, cat_ID, name, status);
        }
        
        public GreenPantryFrontend.ServiceReference1.Invoice getInvoice(int InvoiceID) {
            return base.Channel.getInvoice(InvoiceID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Invoice> getInvoiceAsync(int InvoiceID) {
            return base.Channel.getInvoiceAsync(InvoiceID);
        }
        
        public int addInvoice(int customerId, string status, System.DateTime datePlaced, System.DateTime deliverDate, string message, decimal total, int points) {
            return base.Channel.addInvoice(customerId, status, datePlaced, deliverDate, message, total, points);
        }
        
        public System.Threading.Tasks.Task<int> addInvoiceAsync(int customerId, string status, System.DateTime datePlaced, System.DateTime deliverDate, string message, decimal total, int points) {
            return base.Channel.addInvoiceAsync(customerId, status, datePlaced, deliverDate, message, total, points);
        }
        
        public int updateInvoice(int customerId, string status, System.DateTime datePlaced, System.DateTime deliverDate, string message, decimal total, int points) {
            return base.Channel.updateInvoice(customerId, status, datePlaced, deliverDate, message, total, points);
        }
        
        public System.Threading.Tasks.Task<int> updateInvoiceAsync(int customerId, string status, System.DateTime datePlaced, System.DateTime deliverDate, string message, decimal total, int points) {
            return base.Channel.updateInvoiceAsync(customerId, status, datePlaced, deliverDate, message, total, points);
        }
        
        public GreenPantryFrontend.ServiceReference1.Invoice[] getAllInvoices() {
            return base.Channel.getAllInvoices();
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Invoice[]> getAllInvoicesAsync() {
            return base.Channel.getAllInvoicesAsync();
        }
        
        public GreenPantryFrontend.ServiceReference1.Invoice[] getAllCustomerInvoices(int customerId) {
            return base.Channel.getAllCustomerInvoices(customerId);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Invoice[]> getAllCustomerInvoicesAsync(int customerId) {
            return base.Channel.getAllCustomerInvoicesAsync(customerId);
        }
        
        public GreenPantryFrontend.ServiceReference1.InvoiceLine[] getAllInvoiceLines(int InvoiceID) {
            return base.Channel.getAllInvoiceLines(InvoiceID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.InvoiceLine[]> getAllInvoiceLinesAsync(int InvoiceID) {
            return base.Channel.getAllInvoiceLinesAsync(InvoiceID);
        }
        
        public int addInvoiceLine(int product_ID, int invoice_ID, int quantity, decimal price) {
            return base.Channel.addInvoiceLine(product_ID, invoice_ID, quantity, price);
        }
        
        public System.Threading.Tasks.Task<int> addInvoiceLineAsync(int product_ID, int invoice_ID, int quantity, decimal price) {
            return base.Channel.addInvoiceLineAsync(product_ID, invoice_ID, quantity, price);
        }
        
        public int addToList(int userID, int productID, int quantity) {
            return base.Channel.addToList(userID, productID, quantity);
        }
        
        public System.Threading.Tasks.Task<int> addToListAsync(int userID, int productID, int quantity) {
            return base.Channel.addToListAsync(userID, productID, quantity);
        }
        
        public GreenPantryFrontend.ServiceReference1.ShoppingList[] getList(int userID) {
            return base.Channel.getList(userID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.ShoppingList[]> getListAsync(int userID) {
            return base.Channel.getListAsync(userID);
        }
        
        public int updateList(int userID, int P_ID, int quantity) {
            return base.Channel.updateList(userID, P_ID, quantity);
        }
        
        public System.Threading.Tasks.Task<int> updateListAsync(int userID, int P_ID, int quantity) {
            return base.Channel.updateListAsync(userID, P_ID, quantity);
        }
        
        public int removeList(int userID) {
            return base.Channel.removeList(userID);
        }
        
        public System.Threading.Tasks.Task<int> removeListAsync(int userID) {
            return base.Channel.removeListAsync(userID);
        }
        
        public GreenPantryFrontend.ServiceReference1.Address getAddress(int addID) {
            return base.Channel.getAddress(addID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Address> getAddressAsync(int addID) {
            return base.Channel.getAddressAsync(addID);
        }
        
        public GreenPantryFrontend.ServiceReference1.Address[] getUserAddresses(int userID) {
            return base.Channel.getUserAddresses(userID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Address[]> getUserAddressesAsync(int userID) {
            return base.Channel.getUserAddressesAsync(userID);
        }
        
        public GreenPantryFrontend.ServiceReference1.Address getPrimaryAddress(int userID) {
            return base.Channel.getPrimaryAddress(userID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Address> getPrimaryAddressAsync(int userID) {
            return base.Channel.getPrimaryAddressAsync(userID);
        }
        
        public int addAddress(string line1, string line2, string suburb, string city, int zip, string type, int C_ID, string Province, int primary, string number) {
            return base.Channel.addAddress(line1, line2, suburb, city, zip, type, C_ID, Province, primary, number);
        }
        
        public System.Threading.Tasks.Task<int> addAddressAsync(string line1, string line2, string suburb, string city, int zip, string type, int C_ID, string Province, int primary, string number) {
            return base.Channel.addAddressAsync(line1, line2, suburb, city, zip, type, C_ID, Province, primary, number);
        }
        
        public int updateAddress(string line1, string line2, string suburb, string city, string province, int zip, string type, int addID, int primary, string number) {
            return base.Channel.updateAddress(line1, line2, suburb, city, province, zip, type, addID, primary, number);
        }
        
        public System.Threading.Tasks.Task<int> updateAddressAsync(string line1, string line2, string suburb, string city, string province, int zip, string type, int addID, int primary, string number) {
            return base.Channel.updateAddressAsync(line1, line2, suburb, city, province, zip, type, addID, primary, number);
        }
        
        public int deleteAddress(int addressID) {
            return base.Channel.deleteAddress(addressID);
        }
        
        public System.Threading.Tasks.Task<int> deleteAddressAsync(int addressID) {
            return base.Channel.deleteAddressAsync(addressID);
        }
        
        public GreenPantryFrontend.ServiceReference1.Card getCard(int id) {
            return base.Channel.getCard(id);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Card> getCardAsync(int id) {
            return base.Channel.getCardAsync(id);
        }
        
        public int addCard(int Cus_ID, string description, string name, string number, System.DateTime expiry) {
            return base.Channel.addCard(Cus_ID, description, name, number, expiry);
        }
        
        public System.Threading.Tasks.Task<int> addCardAsync(int Cus_ID, string description, string name, string number, System.DateTime expiry) {
            return base.Channel.addCardAsync(Cus_ID, description, name, number, expiry);
        }
        
        public int updateCards(int c_ID, int Cust_ID, string description, string name, string number, System.DateTime expiry) {
            return base.Channel.updateCards(c_ID, Cust_ID, description, name, number, expiry);
        }
        
        public System.Threading.Tasks.Task<int> updateCardsAsync(int c_ID, int Cust_ID, string description, string name, string number, System.DateTime expiry) {
            return base.Channel.updateCardsAsync(c_ID, Cust_ID, description, name, number, expiry);
        }
        
        public GreenPantryFrontend.ServiceReference1.Device getDevice(int userID) {
            return base.Channel.getDevice(userID);
        }
        
        public System.Threading.Tasks.Task<GreenPantryFrontend.ServiceReference1.Device> getDeviceAsync(int userID) {
            return base.Channel.getDeviceAsync(userID);
        }
        
        public int addDevices(int cust_ID, string useragent) {
            return base.Channel.addDevices(cust_ID, useragent);
        }
        
        public System.Threading.Tasks.Task<int> addDevicesAsync(int cust_ID, string useragent) {
            return base.Channel.addDevicesAsync(cust_ID, useragent);
        }
        
        public int getUsersPerDay(System.DateTime day) {
            return base.Channel.getUsersPerDay(day);
        }
        
        public System.Threading.Tasks.Task<int> getUsersPerDayAsync(System.DateTime day) {
            return base.Channel.getUsersPerDayAsync(day);
        }
        
        public double calculateProfit() {
            return base.Channel.calculateProfit();
        }
        
        public System.Threading.Tasks.Task<double> calculateProfitAsync() {
            return base.Channel.calculateProfitAsync();
        }
        
        public double profitPerProduct(int P_ID) {
            return base.Channel.profitPerProduct(P_ID);
        }
        
        public System.Threading.Tasks.Task<double> profitPerProductAsync(int P_ID) {
            return base.Channel.profitPerProductAsync(P_ID);
        }
        
        public double profitPerSubCat(int S_ID) {
            return base.Channel.profitPerSubCat(S_ID);
        }
        
        public System.Threading.Tasks.Task<double> profitPerSubCatAsync(int S_ID) {
            return base.Channel.profitPerSubCatAsync(S_ID);
        }
        
        public double profitPerCat(int C_ID) {
            return base.Channel.profitPerCat(C_ID);
        }
        
        public System.Threading.Tasks.Task<double> profitPerCatAsync(int C_ID) {
            return base.Channel.profitPerCatAsync(C_ID);
        }
        
        public decimal calcProfitPerday(System.DateTime date) {
            return base.Channel.calcProfitPerday(date);
        }
        
        public System.Threading.Tasks.Task<decimal> calcProfitPerdayAsync(System.DateTime date) {
            return base.Channel.calcProfitPerdayAsync(date);
        }
        
        public decimal calcProductVAT(int P_ID) {
            return base.Channel.calcProductVAT(P_ID);
        }
        
        public System.Threading.Tasks.Task<decimal> calcProductVATAsync(int P_ID) {
            return base.Channel.calcProductVATAsync(P_ID);
        }
        
        public int getNumProductsInSub(int subID) {
            return base.Channel.getNumProductsInSub(subID);
        }
        
        public System.Threading.Tasks.Task<int> getNumProductsInSubAsync(int subID) {
            return base.Channel.getNumProductsInSubAsync(subID);
        }
        
        public int usersperWeek(System.DateTime currentDate) {
            return base.Channel.usersperWeek(currentDate);
        }
        
        public System.Threading.Tasks.Task<int> usersperWeekAsync(System.DateTime currentDate) {
            return base.Channel.usersperWeekAsync(currentDate);
        }
    }
}
